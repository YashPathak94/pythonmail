pipeline {
    agent any
    stages {
        stage('Checkout Code') {
            steps {
                // Pull the code from your repository into the workspace
                git url: 'https://github.com/your-repo.git', branch: 'main'
            }
        }
        stage('Verify Directory Structure') {
            steps {
                // List files to ensure directories are present
                sh 'ls -R $WORKSPACE'
            }
        }
    }
}


pipeline {
    agent any
    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/your-repo.git', branch: 'main'
            }
        }
        stage('Run Flyway Migration in Docker') {
            agent {
                docker {
                    image 'docker-local/jenkins-linux-flyway'
                    args "-v ${env.WORKSPACE}/checkout-flyway/sql:/flyway/sql -v ${env.WORKSPACE}/checkout-flyway/conf:/flyway/conf"
                }
            }
            steps {
                // Run Flyway command inside the container
                sh 'flyway -locations=filesystem:/flyway/sql -configFiles=/flyway/conf/flyway.toml -environment=devpoc migrate'
            }
        }
    }
}


pipeline {
    agent any
    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/your-repo.git', branch: 'main'
            }
        }
        stage('Run Flyway Migration in Docker') {
            agent {
                docker {
                    image 'docker-local/jenkins-linux-flyway'
                    args "-v ${env.WORKSPACE}/checkout-flyway/sql:/flyway/sql -v ${env.WORKSPACE}/checkout-flyway/conf:/flyway/conf"
                }
            }
            steps {
                // Check if files are mounted correctly
                sh 'ls -R /flyway'

                // Run Flyway command
                sh 'flyway -locations=filesystem:/flyway/sql -configFiles=/flyway/conf/flyway.toml -environment=devpoc migrate'
            }
        }
    }
}

// Set permissions before running Docker
sh 'chmod -R 755 ${env.WORKSPACE}/checkout-flyway'

